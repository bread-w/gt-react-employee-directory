{"version":3,"sources":["utils/API.jsx","components/Col.jsx","components/Container.jsx","components/Row.jsx","components/UserInfo.jsx","components/SearchForm.jsx","components/UserTable.jsx","App.js","serviceWorker.js","index.js"],"names":["axios","get","Col","props","size","split","map","join","className","children","Container","fluid","Row","UserInfo","alt","name","src","first","last","email","phone","age","nationality","SearchForm","value","search","onChange","handleInputChange","list","type","placeholder","id","UserTable","state","users","filteredUsers","sort","event","target","console","log","filter","user","toLowerCase","indexOf","setState","handleSortChange","sortByName","userA","userB","handleFormSubmit","API","then","res","data","status","Error","message","results","error","catch","err","this","onClick","key","login","uuid","dob","location","country","picture","thumbnail","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c333280.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  getRandomPeople: () => {\r\n    return axios.get(\"https://randomuser.me/api/?results=100\");\r\n  },\r\n  getPersonByName: (name) => {\r\n    return axios.get(\"https://randomuser.me/api/?inc=\" + name);\r\n  },\r\n};\r\n","import React from \"react\";\r\n\r\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\r\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\r\n\r\nfunction Col(props) {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return (\r\n    <div className={size}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Col;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\nimport Col from \"./Col\";\r\nimport Container from \"./Container\";\r\nimport Row from \"./Row\";\r\n\r\nconst UserInfo = (props) => {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row>\r\n          <Col size=\"md-2\">\r\n            <img alt={props.name} className=\"img-fluid\" src={props.src} />\r\n          </Col>\r\n          <Col size=\"md-2\">\r\n            <p>\r\n              {props.first} {props.last}\r\n            </p>\r\n          </Col>\r\n          <Col size=\"md-2\">\r\n            <p>{props.email}</p>\r\n          </Col>\r\n          <Col size=\"md-2\">\r\n            <p>{props.phone}</p>\r\n          </Col>\r\n          <Col size=\"md-2\">\r\n            <p>{props.age}</p>\r\n          </Col>\r\n          <Col size=\"md-2\">\r\n            <p>{props.nationality}</p>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.name array\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n        <input\r\n          value={props.search}\r\n          onChange={props.handleInputChange}\r\n          name=\"name\"\r\n          list=\"names\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Filter by Employee Name...\"\r\n          id=\"name\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React, { Component } from \"react\";\r\nimport \"./UserTable.css\";\r\nimport API from \"../utils/API\";\r\nimport UserInfo from \"./UserInfo\";\r\nimport SearchForm from \"./SearchForm\";\r\n\r\n\r\nclass UserTable extends Component {\r\n  state = {\r\n    users: [],\r\n    filteredUsers: [],\r\n    sort: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getRandomPeople()\r\n      .then((res) => {\r\n        console.log(res.data.results);\r\n        this.setState({\r\n          users: res.data.results,\r\n          filteredUsers: res.data.results,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const value = event.target.value;\r\n    console.log(value);\r\n    const filteredUsers = this.state.users.filter((user) => {\r\n      return user.name.first.toLowerCase().indexOf(value.toLowerCase()) !== -1;\r\n    });\r\n    this.setState({ filteredUsers });\r\n  };\r\n\r\n  handleSortChange = () => {\r\n    this.setState({ sort: !this.state.sort });\r\n    let sortByName;\r\n    if (this.state.sort) {\r\n      sortByName = this.state.users.sort((userA, userB) => {\r\n        if (userA.name.first > userB.name.first) {\r\n          return 1;\r\n        } else if (userA.name.first < userB.name.first) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    } else {\r\n      sortByName = this.state.users.sort((userA, userB) => {\r\n        if (userA.name.first < userB.name.first) {\r\n          return 1;\r\n        } else if (userA.name.first > userB.name.first) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n    this.setState({ users: sortByName });\r\n  };\r\n\r\n  handleFormSubmit = (event) => {\r\n    API.getRandomPeople(this.state.search)\r\n      .then((res) => {\r\n        if (res.data.status === \"error\") {\r\n          throw new Error(res.data.message);\r\n        }\r\n        this.setState({ results: res.data.message, error: \"\" });\r\n      })\r\n      .catch((err) => this.setState({ error: err.message }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"userTable\">\r\n        <h1>Employee Directory</h1>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n          <div className=\"col-sm-4\"></div>\r\n            <div className=\"col-sm-4\">\r\n              <SearchForm handleInputChange={this.handleInputChange} />\r\n            </div>\r\n            <div className=\"col-sm-4\"></div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-2\">\r\n              <h3>Headshot</h3>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n             \r\n              <h3 onClick={this.handleSortChange}>\r\n                Name\r\n                <button className=\"sorter\">\r\n                {!this.state.sort && <span> &#8963;</span>}\r\n                {this.state.sort && <span> &#8964;</span>}\r\n                </button>\r\n              </h3>\r\n              \r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <h3>Email</h3>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <h3>Phone</h3>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <h3>Age</h3>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <h3>Nationality</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.filteredUsers.map((user) => (\r\n          <UserInfo\r\n            key={user.login.uuid}\r\n            first={user.name.first}\r\n            last={user.name.last}\r\n            email={user.email}\r\n            phone={user.phone}\r\n            age={user.dob.age}\r\n            nationality={user.location.country}\r\n            src={user.picture.thumbnail}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserTable;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport UserTable from \"./components/UserTable.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}